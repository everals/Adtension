{"ast":null,"code":"import { greetings, farewells, requests, names, badEmails } from \"./emailTemplates\";\nimport { bannerList, badBannerList } from \"./bannerTemplates\";\nexport function rand(a, b) {\n  return Math.floor(Math.random() * (b - a + 1) + a);\n}\nexport const generateName = () => {\n  return names[Math.floor(Math.random() * names.length)];\n};\nexport const generateBadEmailText = () => {\n  return badEmails[Math.floor(Math.random() * badEmails.length)];\n};\nconst banners = [...bannerList, ...badBannerList];\nexport function generateAdvertisementRequest(mail, owner, type) {\n  const textType = ['плашку', 'кнопку', 'ссылку'][type - 1];\n  const greeting = greetings[Math.floor(Math.random() * greetings.length)];\n  const request = requests[Math.floor(Math.random() * requests.length)].replace(/NAME/g, textType);\n  const farewell = farewells[Math.floor(Math.random() * farewells.length)];\n\n  // Генерация сообщения\n  let message;\n  if (type === 1) {\n    message = `\n            ${greeting} ${request}\n            Заголовок плашки: <b>«${mail.title}»</b>.<br>\n            Текст плашки: <b>«${mail.text}»</b>\n            ${farewell}\n            <br><br>\n            От ${owner}.\n        `;\n  } else {\n    message = `\n            ${greeting} ${request}\n            Текст ${type === 2 ? 'кнопки' : 'плашки'}: <b>«${mail.title}»</b>.<br>\n            ${farewell}\n            <br><br>\n            От ${owner}.\n        `;\n  }\n  return message;\n}\n;\nexport function getCurrentTime() {\n  const now = new Date();\n  const hours = String(now.getHours()).padStart(2, '0');\n  const minutes = String(now.getMinutes()).padStart(2, '0');\n  return `${hours}:${minutes}`;\n}\nexport const generateBadEmail = () => {\n  const sum = rand(-15, -1);\n  const email = generateBadEmailText();\n  email.text = email.text.replace(/SUM/g, (-sum).toString());\n  return {\n    name: email.name,\n    time: getCurrentTime(),\n    messageText: email.text,\n    text: '',\n    title: '',\n    price: sum,\n    isNew: true,\n    isBab: false,\n    isDisable: true\n  };\n};\nexport const generateWorkEmail = () => {\n  const banner = banners[Math.floor(Math.random() * banners.length)];\n  const type = rand(1, 3);\n  const name = generateName();\n  return {\n    name: name,\n    time: getCurrentTime(),\n    messageText: generateAdvertisementRequest(banner, name, type),\n    text: banner.text,\n    title: banner.title,\n    price: rand(1, 8),\n    isNew: true,\n    isBab: badBannerList.includes(banner),\n    isDisable: false\n  };\n};\nexport const generateEmail = () => {\n  if (rand(1, 20) === 1) {\n    return generateBadEmail();\n  } else {\n    return generateWorkEmail();\n  }\n};","map":{"version":3,"names":["greetings","farewells","requests","names","badEmails","bannerList","badBannerList","rand","a","b","Math","floor","random","generateName","length","generateBadEmailText","banners","generateAdvertisementRequest","mail","owner","type","textType","greeting","request","replace","farewell","message","title","text","getCurrentTime","now","Date","hours","String","getHours","padStart","minutes","getMinutes","generateBadEmail","sum","email","toString","name","time","messageText","price","isNew","isBab","isDisable","generateWorkEmail","banner","includes","generateEmail"],"sources":["C:/Users/smerd/Desktop/Adtension/src/scripts/emailGenerate.ts"],"sourcesContent":["import { Email as EmailInterface, Banner as BannerInterface, Anal, Rialto, Bot, } from './types';\r\nimport { greetings, farewells, requests, names, badEmails, } from \"./emailTemplates\";\r\nimport { bannerList, badBannerList, } from \"./bannerTemplates\";\r\n\r\nexport function rand(a: number, b: number): number {\r\n    return Math.floor(Math.random() * (b - a + 1) + a);\r\n}\r\n\r\nexport const generateName = () => {\r\n    return names[Math.floor(Math.random() * names.length)];\r\n};\r\n\r\n\r\nexport const generateBadEmailText = () => {\r\n    return badEmails[Math.floor(Math.random() * badEmails.length)];\r\n};\r\n\r\nconst banners = [...bannerList, ...badBannerList];\r\n\r\nexport function generateAdvertisementRequest(mail: { title: string, text: string, }, owner: string,  type: number, ): string {\r\n    const textType = ['плашку', 'кнопку', 'ссылку'][type - 1];\r\n    const greeting = greetings[Math.floor(Math.random() * greetings.length)];\r\n    const request = requests[Math.floor(Math.random() * requests.length)].replace(/NAME/g, textType);\r\n    const farewell = farewells[Math.floor(Math.random() * farewells.length)];\r\n\r\n    // Генерация сообщения\r\n    let message: string;\r\n    if (type === 1) {\r\n        message = `\r\n            ${greeting} ${request}\r\n            Заголовок плашки: <b>«${mail.title}»</b>.<br>\r\n            Текст плашки: <b>«${mail.text}»</b>\r\n            ${farewell}\r\n            <br><br>\r\n            От ${owner}.\r\n        `;\r\n    } else {\r\n        message = `\r\n            ${greeting} ${request}\r\n            Текст ${ type === 2 ? 'кнопки' : 'плашки' }: <b>«${mail.title}»</b>.<br>\r\n            ${farewell}\r\n            <br><br>\r\n            От ${owner}.\r\n        `;\r\n    }\r\n\r\n    return message;\r\n};\r\n\r\nexport function getCurrentTime(): string {\r\n    const now = new Date();\r\n    const hours = String(now.getHours()).padStart(2, '0');\r\n    const minutes = String(now.getMinutes()).padStart(2, '0');\r\n    return `${hours}:${minutes}`;\r\n}\r\n\r\nexport const generateBadEmail = (): EmailInterface => {\r\n    const sum = rand(-15, -1);\r\n    const email = generateBadEmailText();\r\n    email.text = email.text.replace(/SUM/g, (-sum).toString());\r\n\r\n    return {\r\n        name: email.name,\r\n        time: getCurrentTime(),\r\n        messageText: email.text,\r\n        text: '',\r\n        title: '',\r\n        price: sum,\r\n        isNew: true,\r\n        isBab: false,\r\n        isDisable: true,\r\n    }\r\n};\r\n\r\nexport const generateWorkEmail = (): EmailInterface => {\r\n    const banner = banners[Math.floor(Math.random() * banners.length)];\r\n    const type = rand(1,3);\r\n    const name = generateName();\r\n\r\n    return {\r\n        name: name,\r\n        time: getCurrentTime(),\r\n        messageText: generateAdvertisementRequest(banner, name, type),\r\n        text: banner.text,\r\n        title: banner.title,\r\n        price: rand(1, 8),\r\n        isNew: true,\r\n        isBab: badBannerList.includes(banner),\r\n        isDisable: false,\r\n    }\r\n};\r\n\r\nexport const generateEmail = (): EmailInterface => {\r\n    if (rand(1, 20) === 1) {\r\n        return generateBadEmail()\r\n    } else {\r\n        return generateWorkEmail()\r\n    }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}