{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\smerd\\\\Desktop\\\\Adtension\\\\src\\\\components\\\\MovableBlock.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, createRef } from \"react\";\nimport Draggable from \"react-draggable\";\nimport { ResizableBox } from \"react-resizable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction isVerticalOverlap({\n  y: y1,\n  height: height1\n}, {\n  y: y2,\n  height: height2\n}) {\n  return y1 < y2 + height2 && y1 + height1 > y2;\n}\nfunction isHorizontalOverlap({\n  x: x1,\n  width: width1\n}, {\n  x: x2,\n  width: width2\n}) {\n  return x1 < x2 + width2 && x1 + width1 > x2;\n}\nconst Banner = ({\n  children,\n  x,\n  y,\n  width,\n  height,\n  resizeble,\n  maxWidth,\n  minWidth,\n  maxHeight,\n  minHeight,\n  onUpdateBannerX,\n  onUpdateBannerY,\n  onUpdateBannerWidth,\n  onUpdateBannerHeight,\n  isEdit,\n  isSet\n}) => {\n  _s();\n  const blockRef = /*#__PURE__*/createRef();\n  const [isCanSet, setIsCanSet] = useState(false);\n  const [bounds, setBounds] = useState({\n    top: 0,\n    left: 0,\n    right: window.innerWidth - 200,\n    bottom: window.innerHeight - 300\n  });\n  const stopHandler = (_, ui) => {\n    onUpdateBannerX(ui.x);\n    onUpdateBannerY(ui.y);\n  };\n  const setButtonClasses = `px-4 py-2 text-white rounded transition duration-300 absolute -top-3 left-0 -translate-y-full bg-primary-500 ${isCanSet ? 'bg-green-500 hover:bg-green-600 cursor-poiner' : 'bg-gray-500 cursor-not-allowed'}`;\n  const dragHandler = (_, ui) => {\n    const blocks = document.querySelectorAll('.mblock');\n    let top = 0;\n    let left = 0;\n    let right = window.innerWidth - 200;\n    let bottom = window.innerHeight - 300;\n    const currentBlock = Array.from(blocks).find(b => b === blockRef.current);\n    if (!currentBlock) {\n      return;\n    }\n    const {\n      width,\n      height\n    } = currentBlock.getBoundingClientRect();\n    if (!isSet) {\n      setBounds({\n        top,\n        left,\n        right,\n        bottom\n      });\n      for (let block of blocks) {\n        if (blockRef.current === block) {\n          continue;\n        }\n        const mainBlock = {\n          x: ui.x,\n          y: ui.y + 144,\n          width,\n          height\n        };\n        const extraBlock = block.getBoundingClientRect();\n        if (isHorizontalOverlap(mainBlock, extraBlock) && isVerticalOverlap(mainBlock, extraBlock)) {\n          setIsCanSet(false);\n          return;\n        }\n      }\n      setIsCanSet(true);\n      return;\n    }\n    for (let block of blocks) {\n      if (blockRef.current === block) {\n        continue;\n      }\n      const mainBlock = {\n        x: ui.x,\n        y: ui.y + 144,\n        width,\n        height\n      };\n      const extraBlock = block.getBoundingClientRect();\n      if (isHorizontalOverlap(mainBlock, extraBlock)) {\n        if (mainBlock.y < extraBlock.y) {\n          bottom = Math.min(bottom, extraBlock.y - mainBlock.height - 144);\n        } else {\n          top = Math.max(top, extraBlock.y + extraBlock.height - 144);\n        }\n      }\n      if (isVerticalOverlap(mainBlock, extraBlock)) {\n        if (mainBlock.x < extraBlock.x) {\n          right = Math.min(right, extraBlock.x - mainBlock.width);\n        } else {\n          left = Math.max(left, extraBlock.x + extraBlock.width);\n        }\n      }\n    }\n    setBounds({\n      top,\n      left,\n      right,\n      bottom\n    });\n  };\n  const handleResize = (_, {\n    size\n  }) => {\n    if (!onUpdateBannerWidth || !onUpdateBannerHeight) {\n      return;\n    }\n    onUpdateBannerWidth(size.width);\n    onUpdateBannerHeight(size.height);\n  };\n  const setItem = () => {};\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    onStop: stopHandler,\n    onDrag: dragHandler,\n    scale: 1,\n    defaultPosition: {\n      x,\n      y\n    },\n    handle: isEdit ? '#nothing' : undefined,\n    bounds: bounds,\n    children: resizeble ? /*#__PURE__*/_jsxDEV(ResizableBox, {\n      onResize: handleResize,\n      width: width || 0,\n      height: height || 0,\n      minConstraints: [150, 150],\n      maxConstraints: [400, 250],\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-full\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `mblock h-full ${isEdit ? 'mblock--edit' : ''} ${isSet ? '' : 'mblock--not-set'}`,\n          ref: blockRef,\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 25\n        }, this), isSet ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: setItem,\n          className: setButtonClasses,\n          children: \"\\u0420\\u0430\\u0437\\u043C\\u0435\\u0441\\u0442\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `mblock ${isEdit ? 'mblock--edit' : ''} ${isSet ? '' : 'mblock--not-set'}`,\n        ref: blockRef,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }, this), isSet ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: setItem,\n        className: setButtonClasses,\n        children: \"\\u0420\\u0430\\u0437\\u043C\\u0435\\u0441\\u0442\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n};\n_s(Banner, \"VAeN/hQ61GKsYyxSU7+tTwDbct4=\");\n_c = Banner;\nexport default Banner;\nvar _c;\n$RefreshReg$(_c, \"Banner\");","map":{"version":3,"names":["React","useState","createRef","Draggable","ResizableBox","jsxDEV","_jsxDEV","isVerticalOverlap","y","y1","height","height1","y2","height2","isHorizontalOverlap","x","x1","width","width1","x2","width2","Banner","children","resizeble","maxWidth","minWidth","maxHeight","minHeight","onUpdateBannerX","onUpdateBannerY","onUpdateBannerWidth","onUpdateBannerHeight","isEdit","isSet","_s","blockRef","isCanSet","setIsCanSet","bounds","setBounds","top","left","right","window","innerWidth","bottom","innerHeight","stopHandler","_","ui","setButtonClasses","dragHandler","blocks","document","querySelectorAll","currentBlock","Array","from","find","b","current","getBoundingClientRect","block","mainBlock","extraBlock","Math","min","max","handleResize","size","setItem","onStop","onDrag","scale","defaultPosition","handle","undefined","onResize","minConstraints","maxConstraints","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/smerd/Desktop/Adtension/src/components/MovableBlock.tsx"],"sourcesContent":["import React, { useEffect, useState, createRef } from \"react\";\r\nimport Draggable from \"react-draggable\";\r\nimport { Resizable, ResizableBox } from \"react-resizable\";\r\nimport { Banner as BannerInterface } from '../scripts/types';\r\nimport Info from '../components/Info';\r\n\r\ninterface MovableBlockProps {\r\n    children:  React.ReactElement,\r\n\r\n    x: number;\r\n    y: number;\r\n\r\n    resizeble?: boolean,\r\n    width?: number;\r\n    height?: number;\r\n    maxWidth?: number;\r\n    minWidth?: number;\r\n    maxHeight?: number;\r\n    minHeight?: number;\r\n\r\n    onUpdateBannerX: (val: number) => void;\r\n    onUpdateBannerY: (val: number) => void;\r\n    onUpdateBannerWidth?: (val: number) => void;\r\n    onUpdateBannerHeight?: (val: number) => void;\r\n\r\n    isEdit: boolean,\r\n    isSet: boolean,\r\n}\r\n\r\nfunction isVerticalOverlap({y: y1, height: height1}: { y: number, height: number }, {y: y2, height: height2 }: { y: number, height: number }) {\r\n    return (y1 < y2 + height2) && (y1 + height1 > y2);\r\n}\r\n\r\nfunction isHorizontalOverlap({x: x1, width: width1}: { x: number, width: number }, {x: x2, width: width2 }: { x: number, width: number }) {\r\n    return (x1 < x2 + width2) && (x1 + width1 > x2);\r\n}\r\n\r\nconst Banner: React.FC<MovableBlockProps> = ({\r\n    children,\r\n    x,\r\n    y,\r\n    width,\r\n    height,\r\n    resizeble,\r\n    maxWidth,\r\n    minWidth,\r\n    maxHeight,\r\n    minHeight,\r\n    onUpdateBannerX,    \r\n    onUpdateBannerY,\r\n    onUpdateBannerWidth,\r\n    onUpdateBannerHeight,\r\n    isEdit,\r\n    isSet,\r\n}) => {\r\n    const blockRef = createRef();\r\n    const [ isCanSet, setIsCanSet ] = useState(false);\r\n    const [ bounds, setBounds ] = useState({\r\n        top: 0,\r\n        left: 0,\r\n        right: window.innerWidth - 200,\r\n        bottom: window.innerHeight - 300,\r\n    });\r\n\r\n    const stopHandler = (_: any, ui: {x: number, y: number}) => {\r\n        onUpdateBannerX(ui.x);\r\n        onUpdateBannerY(ui.y);\r\n    };\r\n\r\n    const setButtonClasses = `px-4 py-2 text-white rounded transition duration-300 absolute -top-3 left-0 -translate-y-full bg-primary-500 ${ isCanSet ? 'bg-green-500 hover:bg-green-600 cursor-poiner' : 'bg-gray-500 cursor-not-allowed' }`;\r\n\r\n    const dragHandler = (_: any, ui: {x: number, y: number}) => {\r\n        const blocks = document.querySelectorAll('.mblock') as NodeListOf<HTMLDivElement>;\r\n        let top = 0;\r\n        let left = 0;\r\n        let right = window.innerWidth - 200;\r\n        let bottom = window.innerHeight - 300;\r\n        const currentBlock = Array.from(blocks).find((b) => b === blockRef.current);\r\n        if (!currentBlock) {\r\n            return;\r\n        }\r\n        const { width, height } = currentBlock.getBoundingClientRect();\r\n\r\n        if (!isSet) {\r\n            setBounds({ top, left, right, bottom, });\r\n            for (let block of blocks) {\r\n                if (blockRef.current === block) {\r\n                    continue;\r\n                }\r\n                const mainBlock = { x: ui.x, y: ui.y + 144, width, height };\r\n                const extraBlock = block.getBoundingClientRect();\r\n                if (isHorizontalOverlap(mainBlock, extraBlock) && isVerticalOverlap(mainBlock, extraBlock)) {\r\n                    setIsCanSet(false);\r\n                    return; \r\n                }\r\n            }\r\n            setIsCanSet(true);\r\n            return;\r\n        }\r\n\r\n        for (let block of blocks) {\r\n            if (blockRef.current === block) {\r\n                continue;\r\n            }\r\n            const mainBlock = { x: ui.x, y: ui.y + 144, width, height };\r\n            const extraBlock = block.getBoundingClientRect();\r\n            if (isHorizontalOverlap(mainBlock, extraBlock)) {\r\n                if (mainBlock.y < extraBlock.y) {\r\n                    bottom = Math.min(bottom, extraBlock.y - mainBlock.height - 144)\r\n                } else {\r\n                    top = Math.max(top, extraBlock.y + extraBlock.height  - 144)\r\n                }\r\n            }\r\n\r\n            if (isVerticalOverlap(mainBlock, extraBlock)) {\r\n                if (mainBlock.x < extraBlock.x) {\r\n                    right = Math.min(right, extraBlock.x - mainBlock.width)\r\n                } else {\r\n                    left = Math.max(left, extraBlock.x + extraBlock.width);\r\n                }\r\n            }\r\n        }\r\n        setBounds({ top, left, right, bottom, });\r\n    };\r\n\r\n    const handleResize = (_: any, { size }: { size: { width: number, height: number }}) => {\r\n        if (!onUpdateBannerWidth || !onUpdateBannerHeight) {\r\n            return;\r\n        }\r\n        onUpdateBannerWidth(size.width);\r\n        onUpdateBannerHeight(size.height);\r\n        \r\n    };\r\n\r\n    const setItem = () => {\r\n\r\n    };\r\n\r\n    return (\r\n        <Draggable\r\n            onStop={stopHandler}\r\n            onDrag={dragHandler}\r\n            scale={1}\r\n            defaultPosition={{x, y}}\r\n            handle={isEdit ? '#nothing' : undefined}\r\n            bounds={bounds}\r\n        >\r\n            {\r\n                resizeble ?\r\n                <ResizableBox\r\n                    onResize={handleResize}\r\n                    width={width || 0}\r\n                    height={height || 0}\r\n                    minConstraints={[150, 150]}\r\n                    maxConstraints={[400, 250]}\r\n                >\r\n                    <div className=\"h-full\">\r\n                        <div\r\n                            className={`mblock h-full ${ isEdit ? 'mblock--edit' : '' } ${isSet ? '' : 'mblock--not-set'}`}\r\n                            ref={blockRef as React.RefObject<HTMLDivElement>}\r\n                        >\r\n                            { children }\r\n                        </div>\r\n                        {\r\n                            isSet ? null :\r\n                            <div\r\n                                onClick={ setItem }\r\n                                className={setButtonClasses}\r\n                            >\r\n                                Разместить\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </ResizableBox>\r\n                :\r\n                <div className=\"\">\r\n                    <div\r\n                        className={`mblock ${ isEdit ? 'mblock--edit' : '' } ${isSet ? '' : 'mblock--not-set'}`}\r\n                        ref={blockRef as React.RefObject<HTMLDivElement>}\r\n                    >\r\n                        { children }\r\n                    </div>\r\n                    {\r\n                        isSet ? null :\r\n                        <div\r\n                            onClick={ setItem }\r\n                            className={setButtonClasses}\r\n                        >\r\n                            Разместить\r\n                        </div>\r\n                    }\r\n                </div>\r\n            }\r\n        </Draggable>\r\n    );\r\n};\r\n\r\nexport default Banner;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}